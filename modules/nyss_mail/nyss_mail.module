<?php

define('BASE_SUBSCRIPTION_GROUP', 'Bluebird_Mail_Subscription');
define('FILTER_ALL', 0);
define('FILTER_IN_SD_ONLY', 1);
define('FILTER_IN_SD_OR_NO_SD', 2);
define('DEFAULT_REPLYTO', 'bluebird.admin@nysenate.gov');

// NYSS 5581
function nyss_mail_custom_theme()
{
  $allowedPaths = array(
    'civicrm/nyss/subscription/manage',
    'civicrm/nyss/subscription/view',
    'civicrm/nyss/subscription/expired',
  );

  if (in_array($_GET['q'], $allowedPaths)) {
    return 'BluebirdPublic';
  }
  else {
    return null;
  }
} // nyss_mail_custom_theme()


function nyss_mail_civicrm_config(&$config)
{
  //establish session and ensure userID based construction if in backend
  $session = CRM_Core_Session::singleton();
  $contactID = $session->get('userID');
  $isAdmin = ($config->userFramework == 'Joomla' &&
              strpos($config->userFrameworkBaseURL, 'administrator'));

  if ($isAdmin && !$contactID) {
    return;
  }

  $dirRoot = dirname(__FILE__).DIRECTORY_SEPARATOR;

  //prepend extension php include path
  $include_path = $dirRoot .'php'. PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);

  //prepend extension template path
  $template =& CRM_Core_Smarty::singleton();
  $templateDir = $dirRoot .'tpl'.DIRECTORY_SEPARATOR;
  array_unshift($template->template_dir, $templateDir);
  return;
} // nyss_mail_civicrm_config()


function nyss_mail_civicrm_alterMailParams(&$params, $context)
{
  require_once 'SmtpApiHeader.php';
  //CRM_Core_Error::debug_var('params', $params);

  $contentTypes = array('text', 'html');

  // Rewrite the public URLs to use pubfiles.nysenate.gov
  foreach ($contentTypes as $ctype) {
    if (isset($params[$ctype])) {
      $params[$ctype] = rewrite_public_urls($params[$ctype]);
    }
  }

  // Confirm that <html>, <head>, <body> elements are present, and add them
  // if necessary.
  $params['html'] = fixup_html_message($params['html']);

  $hdr = new SmtpApiHeader();
  $bbconfig = get_bluebird_instance_config();

  if (isset($bbconfig['senator.email'])) {
    $senator_email = $bbconfig['senator.email'];
  }
  else {
    $senator_email = '';
  }

  if (!empty($bbconfig['senator.email.replyto'])) {
    $replyto = $bbconfig['senator.email.replyto'];
  }
  elseif ($senator_email != '') {
    $replyto = $senator_email;
  }
  else {
    $replyto = DEFAULT_REPLYTO;
  }

  // A context of "civimail" indicates a mass email job, which requires
  // much more setup than a non-civimail message.
  if ($context == 'civimail') {
    $eventQueueID = $contactID = 0;
    $jobInfo = null;
    $extraContent = array_fill_keys($contentTypes, array());

    if (isset($params['event_queue_id'])) {
      $eventQueueID = $params['event_queue_id'];
      unset($params['event_queue_id']);
    }
    else if (empty($params['is_test'])) {
      CRM_Core_Error::debug_var('params: event_queue_id not found', $params);
    }

    // NYSS 5354 - set the "X-clientid" header
    if (isset($params['contact_id'])) {
      $contactID = $params['contact_id'];
      $params['X-clientid'] = $contactID;
      unset($params['contact_id']);
    }

    $params['Return-Path'] = '';
    $params['List-Unsubscribe'] = '';
    $params['Reply-To'] = $replyto;

    if (isset($params['job_id'])) {
      $jobInfo = get_job_info($params['job_id']);
      unset($params['job_id']);
    }

    // NYSS 5579 - Construct the whitelisting language and add to e-mail body.
    // NYSS 7423 - Allow location of whitelisting blurb to be configurable.
    // NYSS 7804 - suppress whitelisting blurb if viewing html
    // If contactID is set, then this is a real email (either job or preview).
    // If contactID is not set, then this is an HTML view of the email.
    if (!empty($contactID)) {
      if (!empty($bbconfig['email.extras.include_whitelist'])) {
        if (isset($bbconfig['email.extras.whitelist_location']) &&
            $bbconfig['email.extras.whitelist_location'] == 'bottom') {
          $locidx = 'post_body';
        }
        else {
          $locidx = 'pre_body';
        }
        $s = get_whitelist_clause($bbconfig);
        $extraContent['text'][$locidx][] = $s['text'];
        $extraContent['html'][$locidx][] = $s['html'];
      }
    }
    else {
      // NYSS 7803 - if viewing HTML, insert FB share image
      $s = get_opengraph_clause($bbconfig, $params['Subject']);
      $extraContent['text']['head'][] = $s['text'];
      $extraContent['html']['head'][] = $s['html'];
    }

    // NYSS 7701 - append link for hosted email if this is part of a mailing
    // NYSS 4864 - optionally include a "Share on Facebook" link
    if ($jobInfo) {
      if (!empty($jobInfo['mailing_hash'])) {
        $view_id = $jobInfo['mailing_hash'];
      }
      else {
        $view_id = $jobInfo['mailing_id'];
      }

      $view_url = get_view_url($bbconfig, $view_id);

      // If a VIEWIN_BROWSER_URL token appears in the HTML content, then
      // suppress the auto-appending of the "View in Browser" link.
      $is_viewin_token = strpos($params['html'], '%VIEWIN_BROWSER_URL%');
      if ($is_viewin_token === false &&
          !empty($bbconfig['email.extras.include_browserview'])) {
        $s = get_browserview_clause($bbconfig);
        $extraContent['text']['post_body'][] = $s['text'];
        $extraContent['html']['post_body'][] = $s['html'];
      }

      // Always auto-append the subscription management/optout link, unless
      // it has been disabled for this CRM instance.
      if (!empty($bbconfig['email.extras.include_optout'])) {
        // NYSS 5581 - opt-out/subscription management link
        $s = get_optout_clause($bbconfig, $contactID, $eventQueueID);
        $extraContent['text']['post_body'][] = $s['text'];
        $extraContent['html']['post_body'][] = $s['html'];
        // Disable SendGrid Opt-Out as we are handling thru subscription page.
        $hdr->addFilterSetting('subscriptiontrack', 'enable', 0);
      }

      // If a SHAREON_FACEBOOK_URL token appears in the HTML content, then
      // suppress the auto-appending of the "share on Facebook" link.
      $is_shareon_token = strpos($params['html'], '%SHAREON_FACEBOOK_URL%');
      if ($is_shareon_token === false &&
          !empty($bbconfig['email.extras.include_shareon'])) {
        $s = get_shareon_clause($bbconfig);
        $extraContent['text']['post_body'][] = $s['text'];
        $extraContent['html']['post_body'][] = $s['html'];
      }
    }
    else {
      // In this case, we are viewing in a browser, so there is no job info
      // available.  However, the URL has the view ID in it.
      $view_id = $_GET['id'];
      $view_url = get_view_url($bbconfig, $view_id);
    }

    $token_replacements = array(
      '%SENATOR_EMAIL%' => $senator_email,
      '%SHAREON_FACEBOOK_URL%' => "https://www.facebook.com/sharer/sharer.php?u=$view_url",
      '%SHAREON_TWITTER_URL%' => "https://twitter.com/intent/tweet?url=$view_url&text=New York State Senate",
      '%SHAREON_REDDIT_URL%' => "https://www.reddit.com/submit?url=$view_url",
      '%VIEWIN_BROWSER_URL%' => $view_url,
      '%MANAGE_SUBSCRIPTIONS_URL%' => ''
    );

    // Add extra content (OpenGraph, whitelist, browser-view, opt-out, share-on)
    // and replace any tokens.
    foreach ($contentTypes as $ctype) {
      if (isset($params[$ctype])) {
        $params[$ctype] = add_extra_content($params[$ctype], $extraContent[$ctype], $ctype);
        $params[$ctype] = replace_tokens($params[$ctype], $token_replacements);
      }
    }

    //Sendgrid headers
    $hdr->setCategory("BluebirdMail: {$jobInfo['mailing_name']} (ID: {$jobInfo['mailing_id']})");
    $hdr->setUniqueArgs(array(
      'instance' => $bbconfig['shortname'],
      'install_class' => $bbconfig['install_class'],
      'servername' => $bbconfig['servername'],
      'mailing_id' => $jobInfo['mailing_id'],
      'job_id' => $jobInfo['job_id'],
      'queue_id' => $eventQueueID,
      'is_test' => $jobInfo['is_test']
    ));
  }
  else {
    // For non-Civimail messages, disable subscription/click/open tracking
    // Sendgrid SMTP-API
    $hdr->setCategory('Bluebird Activity');
    $hdr->setUniqueArgs(array(
      'instance' => $bbconfig['shortname'],
      'install_class' => $bbconfig['install_class'],
      'servername' => $bbconfig['servername']
    ));
    $hdr->addFilterSetting('subscriptiontrack', 'enable', 0);
    $hdr->addFilterSetting('clicktrack', 'enable', 0);
    $hdr->addFilterSetting('opentrack', 'enable', 0);
    //$params['replyTo'] = $replyto;
  }

  // Prevent Sendgrid from dropping any of our messages.
  $hdr->addFilterSetting('bypass_list_management', 'enable', 1);

  $params['headers']['X-SMTPAPI'] = $hdr->asJSON();

  //CRM_Core_Error::debug('session', $_SESSION);
  //CRM_Core_Error::debug_var('params', $params);

  return;
} // nyss_mail_civicrm_alterMailParams()

function nyss_mail_civicrm_postProcess($formName, &$form) {
  //TODO this is no longer used; moved to mailing ext
  if ($formName == 'CRM_Mailing_Form_Group') {
    return;

    $mailingID = $form->getVar('_mailingID');
    $submitValues = $form->_submitValues;
    //CRM_Core_Error::debug_var('submitValues', $submitValues);

    $dedupeEmails = $submitValues['dedupe_email'];
    $mailingCat = CRM_Utils_Array::value('category', $submitValues, null);

    //add exclude_ood to mailing record
    $excludeOOD = (!empty($submitValues['exclude_ood'])) ? $submitValues['exclude_ood'] : FILTER_ALL;

    //exclude_ood is set from config file initially, so overwrite form values
    $bbconfig = get_bluebird_instance_config();

    $excludeOOD = FILTER_ALL;
    if (isset($bbconfig['email.filter.district'])) {
      $filter_district = $bbconfig['email.filter.district'];
      switch ($filter_district) {
        case "1": case "strict": case "in_sd":
          $excludeOOD = FILTER_IN_SD_ONLY;
          break;
        case "2": case "fuzzy": case "in_sd_or_no_sd":
          $excludeOOD = FILTER_IN_SD_OR_NO_SD;
          break;
        default:
          $excludeOOD = FILTER_ALL;
      }
    }

    $sqlParams  = array(
      1 => array($mailingID, 'Integer'),
      2 => array($excludeOOD, 'Integer'),
    );
    CRM_Core_DAO::executeQuery("UPDATE civicrm_mailing SET exclude_ood = %2 WHERE id = %1;", $sqlParams);

    // NYSS 5581
    if ($mailingCat) {
      $sqlParams  = array(
        1 => array($mailingID, 'Integer'),
        2 => array($mailingCat, 'Integer'),
      );
      CRM_Core_DAO::executeQuery("UPDATE civicrm_mailing SET category = %2 WHERE id = %1;", $sqlParams);
    }

    // NYSS 4628, 4879
    if ($form->_submitValues['all_emails']) {
      _addAllEmails($mailingID, $dedupeEmails, $excludeOOD);
    }

    if ($excludeOOD != FILTER_ALL) {
      _excludeOOD($mailingID, $dedupeEmails, $excludeOOD);
    }

    // NYSS 5581
    if ($mailingCat) {
      _excludeCategoryOptOut($mailingID, $mailingCat);
    }

    //add email seed group as last step in the process
    _addEmailSeeds($mailingID);

    //recalculate the total recipients
    if ($form->_submitValues['all_emails'] || $excludeOOD != FILTER_ALL || $mailingCat) {
      $count = CRM_Mailing_BAO_Recipients::mailingSize($mailingID);
      $form->set('count', $count);
      $form->assign('count', $count);
    }

    // NYSS 5996 - set default header/footer if save later on step 1
    $buttonName = $form->controller->getButtonName();
    if ($buttonName == '_qf_Group_submit') {
      $mailing = new CRM_Mailing_DAO_Mailing();
      $mailing->id = $mailingID;
      $mailing->find(true);
      if (empty($mailing->header_id) || empty($mailing->footer_id)) {
        //get default header/footer
        $componentFields = array(
          'header_id' => 'Header',
          'footer_id' => 'Footer',
        );
        foreach ($componentFields as $componentVar => $componentType) {
          $mailing->$componentVar = CRM_Mailing_PseudoConstant::defaultComponent($componentType, '');
        }
        $mailing->created_date = date('YmdHis', strtotime($mailing->created_date));
        $mailing->save();
      }
      //CRM_Core_Error::debug_var('$mailing', $mailing);
    }

    //disable click through/opens/replies
    $mailing = new CRM_Mailing_DAO_Mailing();
    $mailing->id = $mailingID;
    $mailing->find(true);
    $mailing->url_tracking = 0;
    $mailing->forward_replies = 0;
    $mailing->auto_responder = 0;
    $mailing->open_tracking = 0;
    $mailing->created_date = date('YmdHis', strtotime($mailing->created_date));
    $mailing->visibility = 'Public Pages';
    $mailing->save();

    //CRM_Core_Error::debug('postProcess Group form', $form); exit();
  }

  // NYSS 5581
  if ($formName == 'CRM_Profile_Form_Edit' &&
    $form->getVar('_ufGroupName') == 'Mass_Email_Subscriptions'
  ) {
    $vals = $form->_submitValues;
    $cid = $form->getVar('_id');
    //CRM_Core_Error::debug_var('vals', $vals);

    $allEmails = CRM_Core_DAO::executeQuery("
      SELECT id
      FROM civicrm_email
      WHERE contact_id = {$cid}
    ");

    while ($allEmails->fetch()) {
      $mCatsList = '';
      if (isset($vals['email'][$allEmails->id])) {
        $mCatsList = implode(',', $vals['email'][$allEmails->id]['mailing_categories']);
      }
      CRM_Core_DAO::executeQuery("
        UPDATE civicrm_email
        SET mailing_categories = '{$mCatsList}'
        WHERE id = {$allEmails->id}
      ");
    }

    if (!empty($vals['note'])) {
      $form->assign('noteText', $vals['note']);
    }
  }
  //CRM_Core_Error::debug($form); exit();
} //nyss_mail_civicrm_postProcess()

function nyss_mail_civicrm_pre($op, $objectName, $id, &$params) {
  /*Civi::log()->debug('nyss_mail_civicrm_pre', array(
    'op' => $op,
    'objectName' => $objectName,
    'id' => $id,
    'params' => $params,
  ));*/

  //10925 set click/open values to 0
  if ($op == 'create' && $objectName == 'Mailing') {
    $params['open_tracking'] = $params['url_tracking'] = FALSE;
  }
}

function nyss_mail_civicrm_pageRun(&$page)
{
  //CRM_Core_Error::debug_var('page', $page);

  //expose url/open tracking to mailing report
  //need to do manually since we are not using native tracking tools
  if ($page->getVar('_name') == 'CRM_Mailing_Page_Report') {
    $smarty =& CRM_Core_Smarty::singleton();
    $rpt =& $smarty->get_template_vars('report');
    //CRM_Core_Error::debug('rpt', $rpt);

    $rpt['mailing']['url_tracking'] = 1;
    $rpt['mailing']['open_tracking'] = 1;

    $smarty->assign_by_ref('report', $rpt);

    // NYSS 7860 - include mailing category on report page
    $mailingID = $page->_mailing_id;
    if ( $mailingID ) {
      $category = CRM_Core_DAO::singleValueQuery("
        SELECT ov.label
        FROM civicrm_mailing m
        JOIN civicrm_option_value ov
          ON m.category = ov.value
          AND ov.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'mailing_categories')
        WHERE m.id = {$mailingID}
      ");

      if ( $category ) {
        $page->assign('mailing_category', $category);
      }
    }

  }

  // NYSS 5567 - fix title
  if ($page->getVar('_name') == 'CRM_Mailing_Page_Event') {
    $event = CRM_Utils_Array::value('event', $_GET);
    if ($event == 'unsubscribe') {
      CRM_Utils_System::setTitle(ts('Opt-out Requests'));
    }
  }

  // NYSS 5581
  if ($page->getVar('_name') == 'CRM_Profile_Page_View') {
    $gid = CRM_Core_DAO::singleValueQuery("
      SELECT id
      FROM civicrm_uf_group
      WHERE name = 'Mass_Email_Subscriptions'
    ");

    if ($page->getVar('_gid') == $gid) {
      CRM_Utils_System::setTitle('Mass Email Subscriptions');

      //get all emails
      $cid = $page->getVar('_id');

      //get contact display name
      $displayName = civicrm_api('contact', 'getvalue', array('version'=>3, 'id'=>$cid, 'return'=>'display_name'));
      $page->assign('display_name', $displayName);

      //get senator name
      $bbconfig = get_bluebird_instance_config();
      $page->assign('senatorFormal', $bbconfig['senator.name.formal']);

      $contactEmails = array();
      $sql = "
        SELECT *
        FROM civicrm_email
        WHERE contact_id = {$cid}
      ";
      $email = CRM_Core_DAO::executeQuery($sql);

      $locTypes = civicrm_api('location_type', 'get', array('version' => 3));
      //CRM_Core_Error::debug_var('$locTypes', $locTypes);
      $lt = array();
      foreach ($locTypes['values'] as $lt_id => $lt_val) {
        if ($lt_val['is_active']) {
          $lt[$lt_id] = $lt_val['display_name'];
        }
      }
      //CRM_Core_Error::debug_var('$lt', $lt);

      $holdOptions = array(
        1 => ts('On Hold Bounce'),
        2 => ts('On Hold Opt Out'),
      );

      //get category options
      $mCats = array();
      $opts = CRM_Core_DAO::executeQuery("
        SELECT ov.label, ov.value
        FROM civicrm_option_value ov
        JOIN civicrm_option_group og
          ON ov.option_group_id = og.id
          AND og.name = 'mailing_categories'
        ORDER BY ov.label
      ");
      while ($opts->fetch()) {
        $mCats[$opts->value] = $opts->label;
      }

      while ($email->fetch()) {
        $contactEmails[$email->id] = array(
          'location_type_id' => $lt[$email->location_type_id],
          'email' => $email->email,
          'is_primary' => $email->is_primary,
          'on_hold' => CRM_Utils_Array::value($email->on_hold, $holdOptions, ''),
          'hold_date' => $email->hold_date,
        );
        $cats = explode(',', $email->mailing_categories);
        $catsLabel = array();
        foreach ($cats as $cat) {
          $catsLabel[] = $mCats[$cat];
        }
        $contactEmails[$email->id]['mailing_categories'] = implode(', ', $catsLabel);
      }
      $page->assign('emails', $contactEmails);
    }
  } // NYSS 5581
} // nyss_mail_civicrm_pageRun()


function nyss_mail_civicrm_alterTemplateFile($formName, &$form, $context, &$tplName)
{
  //CRM_Core_Error::debug_var('$formName', $formName);
  //CRM_Core_Error::debug_var('$form', $form);
  //CRM_Core_Error::debug_var('$context', $context);
  //CRM_Core_Error::debug_var('$tplName', $tplName);

  if ($formName == 'CRM_Profile_Form_Edit' &&
      $form->getVar('_ufGroupName') == 'Mass_Email_Subscriptions') {
    $tplName = 'CRM/NYSS/Subscription.tpl';
  }

  // NYSS 5581
  if ($formName == 'CRM_Profile_Page_View') {
    $gid = CRM_Core_DAO::singleValueQuery("
      SELECT id
      FROM civicrm_uf_group
      WHERE name = 'Mass_Email_Subscriptions'
    ");

    if ($form->getVar('_gid') == $gid) {
      $tplName = 'CRM/NYSS/SubscriptionView.tpl';
    }
  }
} // nyss_mail_civicrm_alterTemplateFile()


// NYSS 4628
function _addAllEmails($mailingID, $dedupeEmails = false, $excludeOOD = FILTER_ALL)
{
  require_once 'CRM/Mailing/BAO/Mailing.php';

  $sql = "
INSERT INTO civicrm_mailing_recipients
  (mailing_id, email_id, contact_id)
SELECT DISTINCT %1, e.id, e.contact_id
FROM civicrm_email e
JOIN civicrm_mailing_recipients mr
  ON e.contact_id = mr.contact_id
  AND mr.mailing_id = %1
  AND e.on_hold = 0
WHERE e.id NOT IN (
  SELECT email_id
  FROM civicrm_mailing_recipients mr
  WHERE mailing_id = %1
)
";

  if ($dedupeEmails && $excludeOOD == FILTER_ALL) {
    $sql .= "
      AND e.email NOT IN (
        SELECT e.email
        FROM civicrm_mailing_recipients mr
          JOIN civicrm_email e
          ON mr.email_id = e.id
        WHERE mr.mailing_id = %1
      )
    ";
  }
  $params = array(1 => array($mailingID, 'Integer'));
  //CRM_Core_Error::debug('params',$params); exit();

  $dao = CRM_Core_DAO::executeQuery($sql, $params);

  //remove onHold as we didn't do it earlier
  CRM_Mailing_BAO_Mailing::removeOnHold((int)$mailingID);
} // _addAllEmails()


// NYSS 4879
function _excludeOOD($mailingID, $dedupeEmails = false, $excludeOOD)
{
  //determine what SD we are in
  $bbconfig = get_bluebird_instance_config();
  $district = $bbconfig['district'];

  if (empty($district)) {
    return;
  }

  //create temp table to store contacts confirmed to be in district
  $tempTbl = "nyss_temp_excludeOOD_$mailingID";
  $sql = "CREATE TEMPORARY TABLE $tempTbl(contact_id INT NOT NULL, PRIMARY KEY(contact_id)) ENGINE=MyISAM;";
  CRM_Core_DAO::executeQuery($sql);

  $sql = "
    INSERT INTO $tempTbl
    SELECT DISTINCT mr.contact_id
    FROM civicrm_mailing_recipients mr
    JOIN civicrm_address a
      ON mr.contact_id = a.contact_id
    JOIN civicrm_value_district_information_7 di
      ON a.id = di.entity_id
    WHERE mailing_id = $mailingID
      AND ny_senate_district_47 = $district;";
  CRM_Core_DAO::executeQuery($sql);

  //also include unknowns if option enabled
  if ($excludeOOD == FILTER_IN_SD_OR_NO_SD) {
    //include where no district is known or no address is present
    $sql = "
      INSERT INTO $tempTbl
      SELECT mr.contact_id
      FROM civicrm_mailing_recipients mr
      LEFT JOIN civicrm_address a
        ON mr.contact_id = a.contact_id
      LEFT JOIN civicrm_value_district_information_7 di
        ON a.id = di.entity_id
      WHERE mr.mailing_id = $mailingID
      GROUP BY mr.contact_id
      HAVING COUNT(di.ny_senate_district_47) = 0";
    CRM_Core_DAO::executeQuery($sql);
  }

  //now remove contacts from the recipients table that are not found in the inclusion table
  $sql = "
    DELETE FROM civicrm_mailing_recipients
    USING civicrm_mailing_recipients
    LEFT JOIN $tempTbl
      ON civicrm_mailing_recipients.contact_id = $tempTbl.contact_id
    WHERE civicrm_mailing_recipients.mailing_id = $mailingID
      AND $tempTbl.contact_id IS NULL;";
  CRM_Core_DAO::executeQuery($sql);

  //cleanup
  CRM_Core_DAO::executeQuery("DROP TABLE $tempTbl");

  //if not deduping emails, return now
  if (!$dedupeEmails) {
    return;
  }

  //if dedupeEmails, handle that now, as it was skipped earlier in the process
  $tempTbl = "nyss_temp_dedupe_emails_$mailingID";
  $sql = "CREATE TEMPORARY TABLE $tempTbl (email_id INT NOT NULL, PRIMARY KEY(email_id)) ENGINE=MyISAM;";
  CRM_Core_DAO::executeQuery($sql);

  $sql = "
    INSERT INTO $tempTbl
    SELECT mr.email_id
    FROM civicrm_mailing_recipients mr
    JOIN civicrm_email e
      ON mr.email_id = e.id
    WHERE mailing_id = $mailingID
    GROUP BY e.email;";
  CRM_Core_DAO::executeQuery($sql);

  //now remove contacts from the recipients table that are not found in the inclusion table
  $sql = "
    DELETE FROM civicrm_mailing_recipients
    USING civicrm_mailing_recipients
    LEFT JOIN $tempTbl
      ON civicrm_mailing_recipients.email_id = $tempTbl.email_id
    WHERE civicrm_mailing_recipients.mailing_id = $mailingID
      AND $tempTbl.email_id IS NULL;";
  CRM_Core_DAO::executeQuery($sql);

  //cleanup
  CRM_Core_DAO::executeQuery("DROP TABLE $tempTbl");
} // _excludeOOD()


// NYSS 5581
function _excludeCategoryOptOut($mailingID, $mailingCat)
{
  $sql = "
    DELETE FROM civicrm_mailing_recipients
    USING civicrm_mailing_recipients
    JOIN civicrm_email
      ON civicrm_mailing_recipients.email_id = civicrm_email.id
    WHERE FIND_IN_SET({$mailingCat}, civicrm_email.mailing_categories)
      AND civicrm_mailing_recipients.mailing_id = $mailingID
  ";
  //CRM_Core_Error::debug_var('sql', $sql);
  CRM_Core_DAO::executeQuery($sql);
} // _excludeCategoryOptOut()


function _addEmailSeeds($mailingID)
{
  $gid = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_group WHERE name LIKE 'Email_Seeds';");

  if (!$gid) {
    return;
  }

  $sql = "
    INSERT INTO civicrm_mailing_recipients ( mailing_id, contact_id, email_id )
    SELECT $mailingID, e.contact_id, e.id
    FROM civicrm_group_contact gc
    JOIN civicrm_email e
      ON gc.contact_id = e.contact_id
      AND gc.group_id = $gid
      AND gc.status = 'Added'
      AND e.on_hold = 0
      AND ( e.is_primary = 1 OR e.is_bulkmail = 1 )
    JOIN civicrm_contact c
      ON gc.contact_id = c.id
    LEFT JOIN civicrm_mailing_recipients mr
      ON gc.contact_id = mr.contact_id
      AND mr.mailing_id = $mailingID
    WHERE mr.id IS NULL
      AND c.is_deleted = 0;";
  //CRM_Core_Error::debug($sql);exit();
  CRM_Core_DAO::executeQuery($sql);
} // _addEmailSeeds()


function fixup_html_message($m)
{
  $added_tags = '';

  // The <body> tag is typically in the header template, while the </body>
  // tag is in the footer template.  So check for both separately.
  if (stripos($m, '<body') === false) {
    $m = '<body style="font-family:arial; font-size:14px; color:#505050; background-color:#ffffff;" leftmargin="0" topmargin="0" marginheight="0" marginwidth="0" offset="0">'."\n$m";
    $added_tags .= ' BODY';
  }
  if (stripos($m, '</body>') === false) {
    $m .= "\n</body>";
    $added_tags .= ' /BODY';
  }

  // The <head> and </head> tags are typically both in the header template.
  if (stripos($m, '<head') === false) {
    $m = "<head>\n<title>New York State Senate</title>\n</head>\n$m";
    $added_tags .= ' HEAD TITLE /TITLE /HEAD';
  }
  else if (stripos($m, '</head>') === false) {
    $m = str_ireplace('<body', "</head>\n<body", $m);
    $added_tags .= ' /HEAD';
  }

  // The <html> and </html> tags are separated in the header & footer templates.
  if (stripos($m, '<html>') === false) {
    $m = "<html>\n$m";
    $added_tags .= ' HTML';
  }
  if (stripos($m, '</html>') === false) {
    $m .= "\n</html>";
    $added_tags .= ' /HTML';
  }

  if (!empty($added_tags)) {
    $m .= "\n<!-- AutoInserted Tags: $added_tags -->";
  }
  return $m;
} // fixup_html_message()


/* Re-write any URLs in the message body of the form:
 *   <sitename>/sites/<sitename>/pubfiles [old format]
 * or
 *   <sitename>/data/<shortname>/pubfiles [new format]
 *   (where <shortname> is typically the senator's last name and
 *          <envname> is "crm", "crmdev", "crmtest", etc. and
 *          <sitename> is <shortname>.<envname>.nysenate.gov)
 * into:
 *   pubfiles.nysenate.gov/<envname>/<shortname>/
*/
function rewrite_public_urls($s)
{
  $patterns = array(
    // Legacy "/sites/" URLs
    '#[\w-]+\.(crm[\w]*)\.nysenate\.gov/sites/([\w-]+)\.crm[\w]*\.nysenate\.gov/pubfiles/#i',
    // Standard "/data/" URLs
    '#[\w-]+\.(crm[\w]*)\.nysenate\.gov/data/([\w-]+)/pubfiles/#i',
  );
  $replacement = 'pubfiles.nysenate.gov/$1/$2/';

  // Two patterns.  One replacement.  One call to preg_replace().
  return preg_replace($patterns, $replacement, $s);
} // rewrite_public_urls()


function get_job_info($jid)
{
  $mJob = CRM_Core_DAO::executeQuery("SELECT mailing_id, is_test FROM civicrm_mailing_job WHERE id = $jid;");
  while ($mJob->fetch()) {
    $mid = $mJob->mailing_id;
    $test = $mJob->is_test;
  }
  $mJob->free();

  $m = CRM_Core_DAO::executeQuery("SELECT name, hash FROM civicrm_mailing WHERE id = $mid;");
  while ($m->fetch()) {
    $mname = $m->name;
    $hash = $m->hash;
  }

  return array('job_id'=>$jid, 'mailing_id'=>$mid, 'is_test'=>$test,
               'mailing_name'=>$mname, 'mailing_hash'=>$hash);
} // get_job_info()


function get_whitelist_clause($bbcfg)
{
  if (!empty($bbcfg['email.extras.whitelist_html'])) {
    $html = $bbcfg['email.extras.whitelist_html'];
  }
  else {
    $html = 'To ensure delivery of emails to your inbox, please add <a href="mailto:%SENATOR_EMAIL%">%SENATOR_EMAIL%</a> to your email address book.';
  }

  if (!empty($bbcfg['email.extras.whitelist_text'])) {
    $text = $bbcfg['email.extras.whitelist_text'];
  }
  else {
    $text = 'To ensure delivery of emails to your inbox, please add %SENATOR_EMAIL% to your email address book.';
  }

  return array('text' => $text, 'html' => $html);
} // get_whitelist_clause()


function get_view_url($bbcfg, $viewId)
{
  $url = "http://pubfiles.nysenate.gov/{$bbcfg['envname']}/{$bbcfg['shortname']}/view/$viewId";
  //$url = CRM_Utils_System::url('civicrm/mailing/view', 'reset=1&id='.$viewId, true);
  return $url;
} // get_view_url()


function get_browserview_clause($bbcfg)
{
  $text = 'To view this email in your browser, go to %VIEWIN_BROWSER_URL%';
  $html = '<a href="%VIEWIN_BROWSER_URL%" target="_blank">Click here</a> to view this email in your browser.';
  return array('text' => $text, 'html' => $html);
} // get_browserview_clause()


function get_optout_clause($bbcfg, $cid, $qid)
{
  $cs = CRM_Contact_BAO_Contact_Utils::generateChecksum($cid);
  $url = "http://pubfiles.nysenate.gov/{$bbcfg['envname']}/{$bbcfg['shortname']}/subscription/manage/$qid/$cs";

  $text = "To manage your email subscription settings or to unsubscribe, go to $url";
  $html = '<a href="'.$url.'" target="_blank">Click here</a> to manage your email subscription settings or to unsubscribe.';

  return array('text' => $text, 'html' => $html);
} // get_optout_clause()


function get_shareon_clause($bbcfg)
{
  $fbimg = "http://pubfiles.nysenate.gov/{$bbcfg['envname']}/{$bbcfg['shortname']}/common/images/social_media/facebook_share_68x25.png";

  $text = 'To share this on Facebook, go to %SHAREON_FACEBOOK_URL%';
  $html = '<a style="color:#386eff; text-decoration:underline;" href="https://www.facebook.com/sharer/sharer.php?u=%SHAREON_FACEBOOK_URL%" target="_blank">Share&nbsp;on&nbsp;Facebook.</a>';
  return array('text' => $text, 'html' => $html);
} // get_shareon_clause()


function get_opengraph_clause($bbcfg, $subj)
{
  $senator_name = $bbcfg['senator.name.formal'];
  $url = "http://pubfiles.nysenate.gov/{$bbcfg['envname']}/{$bbcfg['shortname']}/common/images/nysenate_logo_200.png";
  $text = '';
  $metas = array(
    '<meta property="og:type" content="article" />',
    '<meta property="og:title" content="'.$subj.'" />',
    '<meta property="og:description" content="From the desk of '.$senator_name.'" />',
    '<meta property="og:image" content="'.$url.'" />',
    '<meta name="twitter:title" content="'.$subj.'" />',
    '<meta name="twitter:description" content="From the desk of '.$senator_name.'" />',
    '<meta name="twitter:image" content="'.$url.'" />',
    '<link rel="image_src" type="image/png" href="'.$url.'" />'
  );
  $html = implode("\n", $metas);
  return array('text' => $text, 'html' => $html);
} // get_opengraph_clause()


function add_extra_content($msg, $extra, $ctype)
{
  $sep = ($ctype == 'text') ? "\n" : "\n<br/>\n";

  // Each of the three "extra" variables is an array of items.
  $extraHead = implode($sep, $extra['head']);
  $extraPreBody = implode($sep, $extra['pre_body']);
  $extraPostBody = implode($sep, $extra['post_body']);

  if ($ctype == 'text') {
    $msg = "$extraHead\n$extraPreBody\n$msg\n$extraPostBody";
  }
  else {
    $patterns = array(
      '#(\s*</head>)#',
      '/(<body( [^>]*)?>\s*)/',
      '#(\s*</body>)#'
    );
    $attr = 'style="text-align:center; font:10px/12px Helvetica, Arial, sans-serif; color:#3f3f3f; padding:0 10px 30px;"';
    $replacements = array(
      "\n<!-- Extra HEAD content -->\n$extraHead\$1",
      "\$1<div id=\"extra_prebody_content\" $attr>\n$extraPreBody\n</div>\n",
      "\n<div id=\"extra_postbody_content\" $attr>\n$extraPostBody\n</div>\$1"
    );
    $msg = preg_replace($patterns, $replacements, $msg);
  }
  return $msg;
} // add_extra_content()


function replace_tokens($msg, $token_map)
{
  $patterns = array_keys($token_map);
  $replacements = array_values($token_map);
  return str_replace($patterns, $replacements, $msg);
} // replace_tokens()
