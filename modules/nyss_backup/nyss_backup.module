<?php

require_once(dirname(__FILE__) . './../../civicrm/scripts/bluebird_config.php');

function nyss_backup_menu()
{
  return array(
    'backupdata' => array(
      'title' => t('Backup/Restore Instance'),
      'page callback' => 'nyss_backup_page',
      'access arguments' => array('export print production files'),
    )
  );
} // nyss_backup_menu()


function nyss_backup_page()
{
  $func_map = array(
    'instance_file_list' => 'nyss_backup_list',
    'delete' => 'nyss_backup_delete',
    'backup' => 'nyss_backup_save',
    'restore' => 'nyss_backup_restore',
  );

  $bbcfg = get_bluebird_instance_config();
  if (!$bbcfg) {
    return "Unable to retrieve configuration for instance.";
  }

  $instance = get_config_value($bbcfg, 'shortname', null);
  $approot = get_config_value($bbcfg, 'app.rootdir', null);
  $dataroot = get_config_value($bbcfg, 'data.rootdir', null);
  $datadirname = get_config_value($bbcfg, 'data_dirname', null);
  $bkupdirname = get_config_value($bbcfg, 'backup.ui.dirname', null);

  if (!$instance || !$approot || !$dataroot || !$datadirname || !$bkupdirname) {
    return "Please ensure that shortname, app.rootdir, data.rootdir, data_dirname, and backup.ui.dirname are all set properly in the configuration file.";
  }

  // Absolute path to the backup directory for this instance.
  $bkupdir = "$dataroot/$datadirname/$bkupdirname/";

  if (!is_dir($bkupdir)) {
    if (!mkdir($bkupdir, 0755)) {
      return "Unable to create backup directory [$bkupdir].";
    }
  }

  if (!empty($_GET['function'])) {
    //error_log('function: '.$_GET['function']);

    $func = $_GET['function'];
    if ($func_map[$func]) {
      $data = call_user_func($func_map[$func], $bkupdir, $bbcfg);
    }
    else {
      $data = array('error' => 'error');
    }

    // Spit out our response and prevent the theme from rendering
    header('Content-type: application/json');
    print json_encode($data);
    exit();
  }
  else {
    //get Civi path and remove oddly appended /drupal path
    $civipath = drupal_get_path('module', 'civicrm');
    $civipath = str_replace('/drupal', '', $civipath);

    $modpath = drupal_get_path('module', 'nyss_backup');

    drupal_add_js("$civipath/bower_components/jquery/dist/jquery.min.js");
    drupal_add_js("$modpath/js/tmpl.js");
    drupal_add_js("$modpath/js/nyss_backup.js");
    drupal_add_css("$modpath/nyss_backup.css");
    drupal_add_html_head([
      '#type' => 'markup',
      '#markup' => file_get_contents("$modpath/js/templates.html")
    ], 'included_template');

    return '';
  }
} // nyss_backup_page()


function nyss_backup_list($dir, $cfg) {
  //fetch all instance backup files from the filesystem
  $files = [];
  if ($handle = opendir($dir)) {
    while (false !== ($file = readdir($handle))) {
      if ($file != '.' && $file != '..' && !is_dir($dir.$file) && preg_match('/.*\.zip/', $file)) {
        $time = filemtime($dir.$file);
        $files[$time] = ['file' => $file, 'time' => $time];
      }
    }
  }
  closedir($handle);

  // Sort by time for convenience
  ksort($files);

  // TODO: Weird format, could improve at some point to be an object {file1:time1, file2:time2, etc}
  return array_values($files);
} // nyss_backup_list()


function nyss_backup_delete($dir, $cfg)
{
  $file = $_GET['file'];
  return array('success' => (!empty($file) && unlink($dir.$file)));
} // nyss_backup_delete()


function nyss_backup_save($dir, $cfg)
{
  $approot = $cfg['app.rootdir'];
  $instance = $cfg['shortname'];
  $file_name = urldecode($_GET['file_name']);
  $file_time = urldecode($_GET['file_time']);

  $file_date = date("Ymd-His", $file_time);

  //if provided file name only consists of white spaces
  //and non word chracters set to default YYYYMMDD-HHMMSS
  if (!$file_name || preg_match('/^[\s\W]*$/', $file_name)) {
    $file_name = $file_date['string_date'];
  }
  else {
    //remove special characters and replace whitespace with _
    $file_name =  preg_replace(array('/(?![ \-])\W/','/ /'), array('','_'), $file_name);
  }

  //truncate the filename to a reasonable length and add the directory
  $full_path = $dir.substr($file_name, 0, 50).".zip";

  //if the file already exists tack on date string
  if (file_exists($full_path)) {
    $full_path = substr($full_path, 0, -4)."-{$file_date['string_date']}.zip";
  }

  shell_exec("$approot/scripts/dumpInstance.sh $instance --zip --archive-file $full_path");

  //touch file to make sure date in file name matches modified date
  return array('success' => file_exists($full_path));
} // nyss_backup_save()


function nyss_backup_restore($dir, $cfg)
{
  $approot = $cfg['app.rootdir'];
  $instance = $cfg['shortname'];
  $file_name = $_GET['file'];

  if (!$file_name) {
    return false;
  }

  passthru("$approot/scripts/restoreInstance.sh $instance --archive-file $dir$file_name --ok >/dev/null", $err);
  return array('success' => ($err == 0 ? true : false));
} // nyss_backup_restore()
