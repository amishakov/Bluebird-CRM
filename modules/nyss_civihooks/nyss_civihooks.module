<?php

function nyss_civihooks_menu()
{
  $items = array();
  $items['nyss_getfile'] = array(
    'title' => t('NYSS Retrieve file'),
    'page callback' => 'nyss_civihooks_getfile',
    'access arguments' => array('export print production files'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
} // nyss_civihooks_menu()


function nyss_civihooks_menu_alter(&$items) {
  //5253
  $items['admin/user/user/create']['access arguments'] = array('create users');

  //7264 remove view tab
  $items['user/%']['type'] = MENU_CALLBACK;
} // nyss_civihooks_menu_alter()


function nyss_civihooks_form_alter(&$form, &$form_state, $form_id) {
  //watchdog('bluebird', 'form_id: <pre>'.print_r($form_id, TRUE).'</pre>');
  //watchdog('bluebird', 'form: <pre>'.print_r($form, TRUE).'</pre>');

  //6062/11725
  if ($form_id == 'user_profile_form') {
    $form['actions']['cancel']['#value'] = 'Delete User Account';
    $form['account']['name']['#description'] = '';
    $form['account']['mail']['#description'] = '';
    $form['account']['name']['#disabled'] = 1;
    unset($form['account']['pass']);

    //inject js because the role modifications below don't work for non-super-admins
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'nyss_civihooks') . '/js/user_profile_form.js',
    );

    //roles
    $form['account']['roles']['#title'] = 'Assignable Roles';
    unset($form['account']['roles'][2]);

    $form['account']['roles'][9]['#prefix'] = '
      <div class="nyss-roles-section-header">Main Role</div>
      <div class="nyss-roles-description">In order for a staff member to get started in Bluebird, they must first have ONE main role assigned to them.</div>
    ';
    $form['account']['roles'][16]['#prefix'] = '
      <div class="nyss-roles-section-header">Add-on Roles</div>
      <div class="nyss-roles-description">Additional roles to extend access in specific feature areas.</div>
      <div class="nyss-roles-subsection-header">Bluebird Mass Email</div>
    ';
    $form['account']['roles'][19]['#prefix'] = '
      <div class="nyss-roles-subsection-header">Bluebird Inbound Email</div>
    ';
    $form['account']['roles'][8]['#prefix'] = '
      <div class="nyss-roles-section-header">Other Senate Office Roles</div>
      <div class="nyss-roles-description">Several Senate central staff offices have permission to access your Senator\'s Bluebird database. The roles below are used specifically for those offices.</div>
    ';
    $form['account']['roles'][4]['#prefix'] = '
      <div class="nyss-roles-section-header">Administrator Roles</div>
    ';
  }

  if ($form_id == 'user_cancel_confirm_form') {
    unset($form['user_cancel_method']['user_cancel_block']);
    unset($form['user_cancel_method']['user_cancel_block_unpublish']);
    unset($form['user_cancel_method']['user_cancel_reassign']);
    $form['user_cancel_method']['user_cancel_delete']['#default_value'] = 'user_cancel_delete';
    $form['user_cancel_method']['user_cancel_delete']['#title'] = 'Delete the user account.';
    $form['user_cancel_method']['#title'] = '';

    unset($form['user_cancel_confirm']);
    $form['description']['#markup'] = 'Please confirm you wish to delete this account.';
    $form['actions']['submit']['#value'] = 'Delete User Account';

    $username = $form['_account']['#value']->name;
    $title = "Are you sure you want to delete the account: {$username}?";
    drupal_set_title($title);
  }

  //6055
  if ($form_id == 'user_admin_account') {
    unset($form['options']['operation']['#options']['cancel']);
  }

  //6740 make sure destination redirect includes query params
  if ($form_id == 'user_login_block') {
    $urlBase = drupal_get_destination();
    $urlQueryParams = drupal_get_query_parameters();
    unset($urlQueryParams['destination']);
    $urlQuery = drupal_http_build_query($urlQueryParams);
    $urlBase['destination'] = $urlBase['destination'].'?'.$urlQuery;
    $form['#action'] = url(current_path(), array('query' => $urlBase, 'external' => false));
  }

  //watchdog('bluebird', 'form (after hook): <pre>'.print_r($form, TRUE).'</pre>');
} // nyss_civihooks_form_alter()


function nyss_civihooks_page_alter(&$page)
{
  //dpm($page);
  $curPage = current_path();
  if ($curPage == 'admin/people') {
    $title = "Manage Users";
    drupal_set_title($title);

    //6709 only show permission filter if admin
    global $user;
    if (!in_array('Administrator', $user->roles) && !in_array('Superuser', $user->roles)) {
      unset($page['content']['system_main']['user_filter_form']['filters']['status']['filters']['permission']);
    }
  }
  elseif (strpos($curPage, 'user/') !== false) {
    $title = "Edit User";
    drupal_set_title($title);
  }
} // nyss_civihooks_page_alter()


function nyss_civihooks_permission()
{
  return array(
    'export print production files' => array(
      'title' => t('Bluebird: Export Print Production Files'),
    ),
    'delete contacts permanently' => array(
      'title' => t('Bluebird: Permanently Delete Contacts'),
    ),
    'administer district' => array(
      'title' => t('Bluebird: Access District Admin Tasks'),
    ),
    'view mass email' => array(
      'title' => t('Bluebird: View Mass Email'),
    ),
    'import print production' => array(
      'title' => t('Bluebird: Access Print Production Import Tool'),
    ),
    'administer inbox polling' => array(
      'title' => t('Bluebird: Access Inbox Polling'),
    ),
  );
} // nyss_civihooks_permission()


function nyss_civihooks_getfile()
{
  civicrm_initialize();
  require_once 'CRM/Core/Config.php';
  $config =& CRM_Core_Config::singleton();

  $file = $_REQUEST['file'];
  $fullpath = $config->uploadDir.'printProduction/'.$file;

  if (!file_exists($fullpath) || !$file) {
    echo "No file provided. Make sure you have entered the full URL.<br />";
    exit();
  }

  $headers = array(
    "Pragma: public",
    "Expires: 0",
    "Cache-Control: no-cache,must-revalidate, post-check=0, pre-check=0",
    "Cache-Control: public",
    "Content-Description: File Transfer",
    "Content-Type: application/csv",
    "Content-Disposition: attachment; filename=".basename($fullpath),
    "Expires: Mon, 26 Jul 1997 05:00:00 GMT",
    'Content-Length: '.filesize($fullpath)
  );

  //don't use this, seems to cause problems...
  //file_transfer($fullpath, $headers);

  //spit out the header
  foreach ($headers as $header) {
    header($header);
  }

  $fh = fopen($fullpath, "r");

  if (!$fh) {
    echo "no file provided. file requested is: $fullpath";
    exit;
  }

  while (!feof($fh)) {
    echo fread($fh, 1024);
    ob_flush();
  }
  fclose($fh);
} // nyss_civihooks_getfile()


function nyss_civihooks_civicrm_config(&$config)
{
  $session = CRM_Core_Session::singleton();

  //NYSS JobID handling
  $jobID = $session->get('jobID');
  if ($jobID) {
    CRM_Core_DAO::executeQuery('SET @jobID = %1',
      array(1 => array($jobID, 'String'))
    );
  }
} // nyss_civihooks_civicrm_config()

/**
 * @param $query
 * @param $name
 * @param $context
 * @param $id
 *
 * @deprecated and should be removed after review
 */
function nyss_civihooks_civicrm_contactListQuery(&$query, $name, $context, $id)
{
  //office staff group ID to use for activity assignees and case roles
  $sql = "SELECT id FROM civicrm_group WHERE name LIKE 'Office_Staff%'";
  $groupID = CRM_Core_DAO::singleValueQuery($sql);

  //limit activity assignees to office staff group
  if (($context == 'activity_assignee' || $context == 'case_activity_assignee')
      && $groupID) {
    //echo $query;
    $query = "
      SELECT CONCAT_WS(' :: ', sort_name, city) as name, cc.id
      FROM civicrm_contact cc
      INNER JOIN civicrm_group_contact cgc
        ON cgc.contact_id = cc.id
      LEFT JOIN civicrm_address a
        ON cc.id = a.contact_id
        AND a.is_primary = 1
      WHERE ( cc.is_deceased != 1 OR cc.is_deceased IS NULL )
        AND cc.sort_name LIKE '%$name%'
        AND cc.is_deleted != 1
        AND cgc.group_id IN ($groupID) AND cgc.status = 'Added'";
  }
  elseif ($context == 'caseview' && $groupID) { //case roles
    $query = "
      SELECT id, data
      FROM (
        SELECT cc.id as id, CONCAT_WS(' :: ', sort_name, city, email) as data, sort_name
        FROM civicrm_contact cc
        LEFT JOIN civicrm_email eml
          ON ( cc.id = eml.contact_id AND eml.is_primary = 1 )
        LEFT JOIN civicrm_address sts
          ON ( cc.id = sts.contact_id AND sts.is_primary = 1 )
        INNER JOIN civicrm_group_contact cgc
          ON cgc.contact_id = cc.id
        WHERE sort_name LIKE '%$name%'
          AND cc.is_deleted != 1
          AND cgc.group_id IN ($groupID)
          AND cgc.status = 'Added'
        LIMIT 0, 10
        ) t
      ORDER BY sort_name";
  }
  elseif ($context == 'navigation') {
    $query = "
      SELECT DISTINCT(cc.id) as id, CONCAT_WS(' :: ', sort_name, email, city) as data, sort_name, email, city
      FROM civicrm_contact cc
      LEFT JOIN civicrm_email eml
        ON ( cc.id = eml.contact_id AND eml.is_primary = 1 )
      LEFT JOIN civicrm_address sts
        ON ( cc.id = sts.contact_id AND sts.is_primary = 1 )
      WHERE ( sort_name LIKE '{$name}%' )
        AND cc.is_deleted != 1
      LIMIT 0, 10
    ";
  }

  //CRM_Core_Error::debug_var('$query',$query);
  //CRM_Core_Error::debug_var('$name',$name);
  //CRM_Core_Error::debug_var('$context',$context);
} //nyss_civihooks_civicrm_contactListQuery()


function nyss_civihooks_civicrm_buildForm($formName, &$form)
{
  /*Civi::log()->debug('buildForm', array(
    '$formName' => $formName,
    '$form' => $form,
  ));*/

  _fixTitles();

  //Limit import file size to 1MB
  if ($formName =='CRM_Import_Form_DataSource') {
    $uploadFileSize = 1048576;
    $uploadSize = round(($uploadFileSize / (1024*1024)), 2);
    $form->assign('uploadSize', $uploadSize);
    $form->add('file', 'uploadFile', ts('Import Data File'), 'size=30 maxlength=60', true);

    $form->setMaxFileSize($uploadFileSize);
    $form->addRule('uploadFile', ts('File size should be less than %1 MBytes (%2 bytes)', array(1 => $uploadSize, 2 => $uploadFileSize)), 'maxfilesize', $uploadFileSize);
    $form->addRule('uploadFile', ts('Input file must be in CSV format'), 'utf8File');
    $form->addRule('uploadFile', ts('A valid file must be uploaded.'), 'uploadedfile');
    $form->_rules['uploadFile'][1]['message'] = 'File size should be less than 1 MBytes (1048576 bytes)';
  }

  //advanced search
  if ($formName == 'CRM_Contact_Form_Search_Advanced') {
    //3815 add privacy option note
    $form->addElement('text', 'custom_64', ts('Privacy Option Notes'), array('id'=>'custom_64'), 'size="30"');

    //7906 search birth date by month only
    $months = array(
      ''  => '- select month -',
      '1' => 'January',
      '2' => 'February',
      '3' => 'March',
      '4' => 'April',
      '5' => 'May' ,
      '6' => 'June',
      '7' => 'July',
      '8' => 'August',
      '9' => 'September',
      '10' => 'October',
      '11' => 'November',
      '12' => 'December',
    );
    $form->add('select', 'birth_date_month',  ts('Birth Date Month'), array('' => ts('- select month -')) + $months);

    //7946
    $form->addDate('log_start_date', ts('Change Log Start'), false, array('formatType' => 'birth'));
    $form->addDate('log_end_date', ts('Change Log End'), false, array('formatType' => 'birth'));

    //10557 remove CMS User
    if ($form->elementExists('uf_user')) {
      $form->removeElement('uf_user');
    }

    //11138 remove activity test
    if ($form->elementExists('activity_test')) {
      $form->removeElement('activity_test');
      CRM_Core_Resources::singleton()->addStyle('a.helpicon[title="Test Records Help"] { display: none; }');
    }

    //11137 default open location panel
    CRM_Core_Resources::singleton()->addScript('$("div.crm-location-accordion").removeClass("collapsed");');

    //11134 change tag label text; remove issue codes from list
    if ($form->elementExists('contact_tags')) {
      $contactTags =& $form->getElement('contact_tags');
      unset($contactTags->_options[0]);
      CRM_Core_Resources::singleton()->addScript('$("select#contact_tags").prev("label").text("Issue Codes")');
    }

    //don't set US as default country in advanced search or contacts with no address are excluded
    $defaults['country'] = '';

    //3527 set deceased to no
    $defaults['is_deceased'] = 0;

    //4332 clear activity creator/assigned
    $defaults['activity_role'] = 0;

    $form->setDefaults($defaults);
  }

  //set NY as default for state field in proximity search
  if ($formName == 'CRM_Contact_Form_Search_Custom' &&
      $form->getVar('_customSearchClass') == 'CRM_Contact_Form_Search_Custom_Proximity') {
    $defaults['state_province_id'] = 1031;
    $form->setDefaults($defaults);
  }

  //5154
  if ($formName == 'CRM_Contact_Form_Search_Custom') {
    $bC = drupal_get_breadcrumb();
    foreach ($bC as $k => $v) {
      if (strpos($v, 'Custom Searches') !== false) {
        unset($bC[$k]);
      }
    }
    drupal_set_breadcrumb($bC);
  }

  //set bounce reason default on, bounce report
  if ($formName == 'CRM_Report_Form_Mailing_Bounce') {
    $defaults['fields[bounce_reason]'] = 1;
    $form->setDefaults($defaults);
  }

  //3674 add limit submit js to all submit buttons
  _nyss_preventDoubleSubmit($formName, $form);

  //add js popup msg to report pdf button
  if ($form->getVar('_instanceForm') && $pdfVar = $form->getVar('_pdfButtonName')) {
    //if the user has selected more than 6 fields for display, warn and proceed
    $form->removeElement($pdfVar);
    $pdfButton =& $form->getElement($pdfVar);

    $jsold = $pdfButton->_attributes['onclick'];
    $jsnew = "var flag = false; $('form').submit(function(e){
      count = $(':input:checkbox:checked[name*=fields]', this);
      if (count.length > 6 && flag == false) {alert('The number of field columns you have selected may exceed what will display in the generated PDF file. Consider selecting fewer fields.'); flag = true;}
    });";
    $pdfButton->setAttribute("onclick", $jsnew.$jsold);

    //3901 if use selects bar or pie chart, hide pdf and print buttons
    $submitVals = $form->_submitValues;
    $paramsVals = $form->getVar('_params');
    $printVar   = $form->getVar('_printButtonName');
    if ((isset($submitVals['charts']) &&
        ($submitVals['charts'] == 'pieChart' || $submitVals['charts'] == 'barChart')) ||
       (isset($paramsVals['charts']) &&
        ($paramsVals['charts'] == 'pieChart' || $paramsVals['charts'] == 'barChart'))) {
      $form->removeElement($pdfVar);
      $form->removeElement($printVar);
      $form->removeElement($printVar); //intentionally duplicated
    }
  }

  //2539 require content in activity email
  if ($formName == 'CRM_Contact_Form_Task_Email') {
    if (empty($form->_submitValues['html_message']) && empty($form->_submitValues['text_message'])) {
      $form->addRule('html_message', ts('Please enter content in either the html or text message fields.'), 'required');
    }
  }

  //4203 disallow setting report nav to root and home parent navigation items
  if ($form->getVar('_instanceForm') && $form->elementExists('parent_id')) {
    $removeList = array(
      '-- select --',
      'Home',
      'Administer',
    );
    $navParent =& $form->getElement('parent_id');
    foreach ($navParent->_options as $key=>$option) {
      if (in_array($option['text'], $removeList)) {
        unset($navParent->_options[$key]);
      }
    }

    //3439 lock permission field
    $permission =& $form->getElement('permission');
    $permission->_values = array(0 => 'access CiviReport');
    $permission->freeze();
  }

  //4339
  if ($formName == 'CRM_Export_Form_Select' && !$form->getVar('_title')) {
    CRM_Utils_System::setTitle(ts('Export All or Selected Fields'));
  }

  //4808 remove various CiviCRM references in page title, etc.
  if (drupal_get_title() == 'CiviCRM') {
    CRM_Utils_System::setTitle(ts('Bluebird'));
  }

  //4921
  if ($formName == 'CRM_Activity_Form_Activity') {
    //resort activity type
    if (!$form->elementExists('activity_type_id')) {
      return;
    }
    $ele =& $form->getElement('activity_type_id');
    $fele =& $form->getElement('followup_activity_type_id');
    $aTypes = $eleOptions = $feleOptions = array();

    foreach ($ele->_options as $k => $aT) {
      $aTypes[$k] = $aT['text'];
    }
    asort($aTypes);
    foreach ($aTypes as $k => $aT) {
      $eleOptions[$k] = array(
        'text' => $ele->_options[$k]['text'],
        'attr' => $ele->_options[$k]['attr'],
      );
      $feleOptions[$k] = array(
        'text' => $fele->_options[$k]['text'],
        'attr' => $fele->_options[$k]['attr'],
      );
    }
    $ele->_options  = $eleOptions;
    $fele->_options = $feleOptions;
  }

  //5399
  if ($formName == 'CRM_Note_Form_Note' && $form->_action != CRM_Core_Action::DELETE) {
    $form->addRule('subject', ts('Please include subject text.'), 'required');
  }

  //6655 add to group perms
  if ($formName == 'CRM_Contact_Form_Task_AddToGroup') {
    if (!CRM_Core_Permission::check('edit groups')) {
      $go =& $form->getElement('group_option');
      unset($go->_elements[1]);

      $form->removeElement('title');
    }
  }

  //5444
  if ($form->getVar('_instanceForm')) {
    $instVals = $form->getVar('_instanceValues');
    if ($instVals['report_id'] == 'logging/contact/detail') {
      $instAttrib = $form->getVar('_attributes');
      $instPath = trim(CRM_Utils_Array::value('action', $instAttrib), '/');
      $printerFriendly = CRM_Utils_System::makeURL('snippet', true, false, $instPath).'2';
      $form->assign('printerFriendly', $printerFriendly);
    }
  }

  //4999
  if ($formName == 'CRM_Contact_Form_Task_PickProfile') {
    foreach ($form->_elements[2]->_options as $k => $opt) {
      if ($k != 0 && strpos($opt['text'], 'Batch') === false) {
        unset($form->_elements[2]->_options[$k]);
      }
    }
  }

  if ($formName == 'CRM_Case_Form_ActivityView') {
    CRM_Core_Resources::singleton()->addScript("
      cj('tr.crm-case-activity-view-Client td.label').text('Constituent');
    ");
  }

  _setDBVars();

  if ($formName == 'CRM_Group_Form_Search') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/groupsSearch.js');
  }

  if ($formName == 'CRM_Group_Form_Edit') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/groupsEdit.js');
  }

  if ($formName == 'CRM_Contact_Form_Search_Builder') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/searchBuilder.js');
  }

  //CRM_Core_Error::debug($formName);
  //CRM_Core_Error::debug($form);
} // nyss_civihooks_civicrm_buildForm()


function nyss_civihooks_civicrm_searchTasks($objectType, &$tasks)
{
  //CRM_Core_Error::debug_var('$objectType', $objectType);
  //CRM_Core_Error::debug_var('$tasks', $tasks);

  if ($objectType == 'contact') {
    unset($tasks[19]); //remove pdf letter creation task, #2284
    //unset($tasks[20]); //remove mass email task, #5498
    unset($tasks[7]); //remove send SMS task, #5665
  }

  //7891
  if ($objectType == 'activity') {
    $tasks[100] = array(
      'title' => 'Update Activity Status',
      'class' => 'CRM_Activity_Form_Task_UpdateStatus',
      'result' => '',
    );
    $tasks[101] = array(
      'title' => 'Tag Activities (assign keywords)',
      'class' => 'CRM_Activity_Form_Task_AddToTag',
      'result' => '',
    );
  }
} // nyss_civihooks_civicrm_searchTasks()


function nyss_civihooks_civicrm_pre($op, $objectName, $objectId, &$objectRef)
{
  //CRM_Core_Error::debug_var('op',$op);
  //CRM_Core_Error::debug_var('objectName',$objectName);
  //CRM_Core_Error::debug_var('objectId',$objectId);
  //CRM_Core_Error::debug_var('objectRef',$objectRef);
  //CRM_Core_Error::backtrace('backTrace', true);

  //NYSS #2729 strip line break
  if (in_array($op, ['edit','create'], true) &&
    in_array($objectName, ['Individual','Organization','Household'], true) &&
    !empty($objectRef['email'])
  ) {
    foreach ($objectRef['email'] as $key => $block) {
      if ($block['signature_html'] == '<br />') {
        $objectRef['email'][$key]['signature_html'] = null;
      }
    }
  }

  //4627 allow blank email overrides
  if ($op == 'edit' && $objectName == 'Profile'
      && isset($objectRef['uf_group_id']) && $objectRef['uf_group_id'] == 8) {
    $objectRef['updateBlankLocInfo'] = true;
  }

  //only create a new address if we have key fields
  //8005 - modified CRM_Core_BAO_Address::dataExists so the below is not really necessary.
  //leaving in place as it would be better if we could handle here...
  if ($op == 'create' && $objectName == 'Address') {
    $skipFields = array('location_type_id', 'is_primary', 'state_province_id', 'country_id', 'contact_id');
    $skipRecord = true;
    foreach ($objectRef as $f => $v) {
      if (!in_array($f, $skipFields) && !empty($v) && $v != 'null') {
        $skipRecord = false;
      }
    }
    if ($skipRecord) {
      foreach ($objectRef as $f => $v) {
        $objectRef[$f] = '';
      }
    }
  }

  //7499/7639 trim space before save
  if (($op == 'edit' || $op == 'create') && $objectName != 'UFMatch') {
    foreach ($objectRef as  $f => $v) {
      if (is_string($v)) {
        if (is_array($objectRef)) {
          $objectRef[$f] = trim($v, ' ');
        }
        elseif (is_object($objectRef)) {
          $objectRef->$f = trim($v, ' ');
        }
      }
    }
    //CRM_Core_Error::debug_var('objectRef after',$objectRef);
  }

  _setDBVars();
} // nyss_civihooks_civicrm_pre()


function nyss_civihooks_civicrm_pageRun(&$page) {
  //CRM_Core_Error::debug_var('pageRun', $page);
  $pagename = $page->getVar('_name');

  _fixTitles();

  //4567 make admin breadcrumb unclickable if lacking permission
  if ($pagename == 'CRM_Admin_Page_Tag' ||
    $pagename == 'CRM_Admin_Page_Mapping' ||
    $pagename == 'CRM_Report_Page_TemplateList'
  ) {
    if (CRM_Core_Permission::check('administer CiviCRM')) {
      return;
    }

    $breadCrumb = drupal_get_breadcrumb();
    foreach ($breadCrumb as $key => $crumb) {
      if ($crumb == '<a href="/civicrm/admin?reset=1">Administer Bluebird</a>') {
        $breadCrumb[$key] = 'Administer Bluebird';
      }
    }
    drupal_set_breadcrumb($breadCrumb);
  }

  //NYSS 5149
  if ($pagename == 'CRM_Dashlet_Page_Activity' ||
      $pagename == 'CRM_Activity_Page_Tab') {
    $activityStatusList = CRM_Core_PseudoConstant::activityStatus();
    $page->assign('activityStatusList', $activityStatusList);
  }

  if ($pagename == 'CRM_Group_Page_Group') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/groupsList.js');
  }

  _setDBVars();
} // nyss_civihooks_civicrm_pageRun()


function nyss_civihooks_civicrm_validateForm($formName, &$fields, &$files, &$form, &$errors) {
  //CRM_Core_Error::debug_var('$formName', $formName);
  //CRM_Core_Error::debug_var('fields', $fields);

  //4272 ensure that target/with contact is set when activity created from contact record
  if ($formName == 'CRM_Activity_Form_Activity' &&
      $form->_context == 'activity' && $form->_action != 8) { //exclude delete
    if (empty($fields['target_contact_id'])) {
      $errors['target_contact_id'] = ts('Please add at least one target contact.');
    }
  }

  if ($formName == 'CRM_Contact_Form_Search_Advanced') {
    $distFlds = array(46, 47, 48, 49, 50, 51, 53, 54, 55);
    foreach ($distFlds as $fld) {
      $form->setElementError("custom_$fld", null);
    }
  }

  if ($formName == 'CRM_Note_Form_Note' &&
    $form->_action != CRM_Core_Action::DELETE
  ) {
    $noteVal = trim($fields['note']);
    if (empty($noteVal)) {
      $errors['note'] = ts('Please enter text in the note field.');
    }

    $subjVal = trim($fields['subject']);
    if (empty($subjVal)) {
      $errors['subject'] = ts('Please enter text in the subject field.');
    }
  }

  if ($formName == 'CRM_Contact_Form_GroupContact') {
    if (empty($fields['group_id'])) {
      //5426 temp fix
      $cid = $form->getVar('_contactId');
      $urlString = 'civicrm/contact/view';
      $urlParams = "action=browse&reset=1&cid={$cid}&selectedChild=group";
      $urlBounce = CRM_Utils_System::url($urlString,$urlParams);

      $errors['group_id'] = 'You must select a group.';
      CRM_Core_Error::statusBounce('You must select a group.', $urlBounce);
    }
  }

  //5725/7653
  if ($formName == 'CRM_Profile_Form_Edit') {
    $contactProfiles = CRM_Core_BAO_UFGroup::getProfiles(array('Individual'));

    switch ($contactProfiles[$fields['gid']]) {
      case 'New Individual':
        $fName = (isset($fields['first_name'])) ? trim($fields['first_name']) : null;
        $lName = (isset($fields['last_name'])) ? trim($fields['last_name']) : null;
        $email = (isset($fields['email-Primary'])) ? trim($fields['email-Primary']) : null;
        if (empty($fName) && empty($lName) && empty($email)) {
          $errors['first_name'] = 'You must enter a first name, last name, or email address, in order to create a contact.';
        }
        break;

      default:
    }
  }

  //CRM_Core_Error::debug_var('$errors', $errors);
} // nyss_civihooks_civicrm_validateForm()


function nyss_civihooks_civicrm_navigationMenu(&$params) {
  //CRM_Core_Error::debug_var('navigationMenu params',$params);

  //5260
  //first find parents
  $reportNavID = $adminNavID = '';
  $reportNav = $adminNav = array();
  foreach ($params as $navID => $navDetails) {
    //unset all but the reports and administer menus
    switch ($navDetails['attributes']['label']) {
      case 'Reports':
        $reportNavID = $navID;
        $reportNav = $navDetails;
        break;
      case 'Administer':
        $adminNavID = $navID;
        $adminNav = $navDetails;
        break;
      default:
    }
    unset($params[$navID]);
  }

  //get max key
  $maxKey = (!empty($params)) ? max(array_keys($params)) : 0;

  //build home menu item
  $params[1] = array(
    'attributes' => array(
      'label'      => 'Home',
      'name'       => 'Home',
      'url'        => 'civicrm/dashboard&reset=1',
      'permission' => 'access CiviCRM',
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => null,
      'navID'      => 1,
      'active'     => 1
    ),
    'child' => array(),
  );

  $params[2] = array(
    'attributes' => array(
      'label'      => 'Advanced Search',
      'name'       => 'Advanced Search',
      'url'        => 'civicrm/contact/search/advanced?reset=1',
      'permission' => 'access CiviCRM',
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => null,
      'navID'      => 2,
      'active'     => 1
    ),
    'child' => array(),
  );

  //build Custom Search menu
  $params[3] = _buildSearchMenu(2);

  //move Report menu
  $params[$reportNavID] = $reportNav;

  //NYSS-7260 add websignup reports
  $params[$reportNavID]['child'][$maxKey+1] = array(
    'attributes' => array(
      'label'      => 'Web Signup Reports',
      'name'       => 'Web Signup Reports',
      'url'        => 'signupreports',
      'permission' => 'access CiviReport',
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => $reportNavID,
      'navID'      => $maxKey+1,
      'active'     => 1
    ),
    'child' => array(),
  );
  //5260 add changelog proofing report
  $params[$reportNavID]['child'][$maxKey+2] = array(
    'attributes' => array(
      'label'      => 'Changelog Proofing Report',
      'name'       => 'Changelog Proofing Report',
      'url'        => 'civicrm/nyss/proofingreport?reset=1',
      'permission' => 'access CiviReport',
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => $reportNavID,
      'navID'      => $maxKey+2,
      'active'     => 1
    ),
    'child' => array(),
  );

  //build Manage menu
  $params[1000] = _buildManageMenu(1000);

  //build Mass Email menu
  $params[2000] = _buildEmailMenu(2000);

  //build Inbox menu
  $params[3000] = _buildInboxMenu(3000);

  //move Administer menu
  $params[$adminNavID] = _buildAdminMenu($adminNavID);

  //create Help menu 11965
  $params[4000] = _buildHelpMenu(4000);

  //CRM_Core_Error::debug_var('navigationMenu params (after)',$params);
}

//build navigation menu
function nyss_civihooks_civicrm_alterTemplateFile($formName, &$form, $context, &$tplName) {
  //Civi::log()->debug('alterTemplateFile', array('formName' => $formName));

  $navigationString = null;
  $navigations = CRM_Core_BAO_Navigation::buildNavigationTree();

  // run the Navigation  through a hook so users can modify it
  CRM_Utils_Hook::navigationMenu($navigations);
  CRM_Core_BAO_Navigation::fixNavigationMenu($navigations);

  //skip children menu item if user don't have access to parent menu item
  $skipMenuItems = array();
  foreach ($navigations as $key => $value) {
    // Home is a special case
    if ($value['attributes']['name'] != 'Home') {
      $name = CRM_Core_BAO_Navigation::getMenuName($value, $skipMenuItems);
      if ($name) {
        //separator before
        if (isset($value['attributes']['separator']) && $value['attributes']['separator'] == 2) {
          $navigationString .= '<li class="menu-separator"></li>';
        }
        $removeCharacters = array('/', '!', '&', '*', ' ', '(', ')', '.');
        $navigationString .= '<li class="menumain">' . $name;
      }
    }

    CRM_Core_BAO_Navigation::recurseNavigation($value, $navigationString, false, $skipMenuItems);
  }

  // clean up - Need to remove empty <ul>'s, this happens when user don't have
  // permission to access parent
  $navigationString = str_replace('<ul></ul></li>', '', $navigationString);

  //CRM_Core_Error::debug_var('navigations', $navigationString);

  $form->assign('navigation', $navigationString);

  //build qfKey (from Core/Smarty/plugins/function.crmNavigationMenu.php)
  $session = CRM_Core_Session::singleton();
  $contactID = $session->get('userID');
  if ($contactID) {
    $lang = CRM_Core_I18n::getLocale();
    $domain = CRM_Core_Config::domainID();
    $key = CRM_Core_BAO_Navigation::getCacheKey($contactID);
    $src = CRM_Utils_System::url("civicrm/ajax/menujs/$contactID/$lang/$domain/$key");
    $qfKey = CRM_Core_Key::get('CRM_Contact_Controller_Search', true);
    //src="' . $src . '"
    $form->assign('quickSearch_qfKey', '<script id="civicrm-navigation-menu" type="text/javascript" data-qfkey=' . json_encode($qfKey) . '></script>');
  }
}//alterTemplateFile

/*
 * @param $messages
 * disable system status check messages
 */
function nyss_civihooks_civicrm_check(&$messages) {
  //Civi::log()->debug('check', array('messages' => $messages));
  foreach ($messages as $k => $msg) {
    unset($messages[$k]);
  }
}//nyss_civihooks_civicrm_check

//10887
function nyss_civihooks_civicrm_alterContent(&$content, $context, $tplName, &$object) {
  if (!CRM_Core_Config::singleton()->debug) {
    $content = _nyss_stripSpaces($content);
  }

  /*Civi::log()->debug('nyss_civihooks_civicrm_alterContent', array(
    '$content' => $content,
    //'$context' => $context,
    //'$tplName' => $tplName,
    //'$object' => $object,
  ));*/
}

function _nyss_stripSpaces($text) {
  return trim(preg_replace('~>\s*\n\s*<~', '><', $text));
}

/**
 * The User ID and Job ID are stored as db variables for inclusion
 * in the log database via the triggers. At times, the variables
 * are lost, causing no value to be stored and in the case of the
 * user ID, preventing the log records from displaying properly
 * (the log record change itself is not impacted). This function can
 * be called to reset those values if they are not currently set.
 */
function _setDBVars() {

  //returning immediately as we've moved this to Core_Config.php; retaining code for now;
  return;

  $session = CRM_Core_Session::singleton();

  if (!CRM_Core_DAO::singleValueQuery('SELECT @civicrm_user_id')) {
    if ($session->get('userID')) {
      CRM_Core_DAO::executeQuery('SET @civicrm_user_id := %1', array(1 => array($session->get('userID'), 'Integer')));
      CRM_Core_Error::debug_log_message("user ID database variable reset to: {$session->get('userID')}");
    }
  }
  if (!CRM_Core_DAO::singleValueQuery('SELECT @jobID')) {
    if ($session->get('jobID')) {
      CRM_Core_DAO::executeQuery('SET @jobID := %1', array(1 => array($session->get('jobID'), 'String')));
      CRM_Core_Error::debug_log_message("jobID database variable reset to: {$session->get('jobID')}");
    }
  }
}

/*
 * given our "starting" ID, construct the manage menu items
 * return the complete array to be added to the main navigation array
 */
function _buildManageMenu($manageID) {
  $manage = array(
    'attributes' => array(
      'label'      => 'Manage',
      'name'       => 'Manage',
      'url'        => null,
      'permission' => null,
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => null,
      'navID'      => $manageID,
      'active'     => 1
    ),
    'child' => array(
      $manageID+1 => array(
        'attributes' => array(
          'label' => 'BOE/3rd Party Import',
          'name' => 'BOE Import',
          'url' => 'importData',
          'permission' => 'access CiviCRM,import print production',
          'operator' => 'AND',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+1,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+2 => array(
        'attributes' => Array(
          'label' => 'Site Maintenance',
          'name' => 'Site Maintenance',
          'url' => 'admin/config/development/maintenance',
          'permission' => 'access CiviCRM,administer site configuration',
          'operator' => 'AND',
          'separator' => 1,
          'parentID' => $manageID,
          'navID' => $manageID+2,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+3 => array(
        'attributes' => Array(
          'label' => 'Backup/Restore',
          'name' => 'Backup/Restore',
          'url' => 'backupdata',
          'permission' => 'administer CiviCRM,export print production files',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+3,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+4 => array(
        'attributes' => Array(
          'label' => 'Load Sample Data',
          'name' => 'Load Sample Data',
          'url' => 'civicrm/nyss/loadsampledata?reset=1',
          'permission' => 'administer CiviCRM',
          'operator' => 'OR',
          'separator' => 1,
          'parentID' => $manageID,
          'navID' => $manageID+4,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+5 => array(
        'attributes' => Array(
          'label' => 'Import Contacts',
          'name' => 'Import Contacts',
          'url' => 'civicrm/import/contact?reset=1',
          'permission' => 'import contacts',
          'operator' => 'AND',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+5,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+6 => array(
        'attributes' => Array(
          'label' => 'Import Activities',
          'name' => 'Import Activities',
          'url' => 'civicrm/import/activity?reset=1',
          'permission' => 'import contacts',
          'operator' => 'AND',
          'separator' => 1,
          'parentID' => $manageID,
          'navID' => $manageID+6,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+7 => array(
        'attributes' => Array(
          'label' => 'Manage Groups',
          'name' => 'Manage Groups',
          'url' => 'civicrm/group?reset=1',
          'permission' => 'edit groups',
          'operator' => 'AND',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+7,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+8 => array(
        'attributes' => Array(
          'label' => 'Manage Tags',
          'name' => 'Manage Tags',
          'url' => 'civicrm/tag?reset=1',
          'permission' => 'administer CiviCRM,manage tags',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+8,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+9 => array(
        'attributes' => Array(
          'label' => 'Manage Users',
          'name' => 'Manage Users',
          'url' => 'admin/people',
          'permission' => 'administer CiviCRM,administer district',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+9,
          'active' => 1,
        ),
        'child' => array(),
      ),
      //6552
      $manageID+10 => array(
        'attributes' => Array(
          'label' => 'Export Permissions',
          'name' => 'Export Permissions',
          'url' => 'civicrm/nyss/exportpermissions',
          'permission' => 'administer CiviCRM',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+10,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+11 => array(
        'attributes' => Array(
          'label' => 'Merge Duplicate Contacts',
          'name' => 'Merge Duplicate Contacts',
          'url' => 'civicrm/contact/deduperules?reset=1',
          'permission' => 'merge duplicate contacts',
          'operator' => 'OR',
          'separator' => 2,
          'parentID' => $manageID,
          'navID' => $manageID+11,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+12 => array(
        'attributes' => Array(
          'label' => 'Case Dashboard',
          'name' => 'Case Dashboard',
          'url' => 'civicrm/case?reset=1',
          'permission' => 'access all cases and activities',
          'operator' => 'AND',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+12,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+13 => array(
        'attributes' => Array(
          'label' => 'Import/Export Mappings',
          'name' => 'Import/Export Mappings',
          'url' => 'civicrm/admin/mapping?reset=1',
          'permission' => 'administer CiviCRM,administer district',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+13,
          'active' => 1,
        ),
        'child' => array(),
      ),
      //5230 add duplicate address removal tool
      $manageID+14 => array(
        'attributes' => Array(
          'label' => 'Duplicate Address Removal',
          'name' => 'Duplicate Address Removal',
          'url' => 'civicrm/dedupe/dupeaddress?reset=1',
          'permission' => 'export print production files',
          'operator' => 'AND',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+14,
          'active' => 1,
        ),
        'child' => array(),
      ),
      //delete trashed tool
      $manageID+15 => array(
        'attributes' => Array(
          'label' => 'Delete Trashed Contacts',
          'name' => 'Delete Trashed Contacts',
          'url' => 'civicrm/nyss/deletetrashed?reset=1',
          'permission' => 'administer CiviCRM,export print production files',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+15,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $manageID+16 => array(
        'attributes' => Array(
          'label' => 'Manage Images',
          'name' => 'Manage Images',
          'url' => 'sites/all/modules/civicrm/packages/kcfinder/browse.php?cms=civicrm&type=images&langCode=en',
          'permission' => 'create mailings, schedule mailings, administer CiviCRM',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $manageID,
          'navID' => $manageID+16,
          'active' => 1,
          'target' => '_blank',
        ),
        'child' => array(),
      ),
    ),
  );

  return $manage;
}//_buildManageMenu

/*
 * given our "starting" ID, construct the mass email menu items
 * return the complete array to be added to the main navigation array
 */
function _buildEmailMenu($emailID) {
  //6799 first retrieve mailing report IDs; prefer reserved, lower IDs
  $rptIDs = array();
  $sql = "
    SELECT id, report_id
    FROM civicrm_report_instance
    WHERE report_id LIKE 'mailing/%'
    ORDER BY is_reserved DESC, id DESC
  ";
  $rpts = CRM_Core_DAO::executeQuery($sql);
  while ($rpts->fetch()) {
    $type = str_replace(array('mailing/', 'Mailing/'), '', $rpts->report_id);
    $rptIDs[$type] = $rpts->id;
  }

  $email = array(
    'attributes' => array(
      'label'      => 'Mass Email',
      'name'       => 'Mass Email',
      'url'        => null,
      'permission' => 'access CiviCRM',
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => null,
      'navID'      => $emailID,
      'active'     => 1
    ),
    'child' => array(
      $emailID+1 => array(
        'attributes' => array(
          'label' => 'New Mass Email',
          'name' => 'New Mass Email',
          'url' => 'civicrm/mailing/send?reset=1',
          'permission' => 'access CiviMail,create mailings,schedule mailings',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+1,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+2 => array(
        'attributes' => Array(
          'label' => 'Draft and Unscheduled Emails',
          'name' => 'Draft and Unscheduled Emails',
          'url' => 'civicrm/mailing/browse/unscheduled?reset=1&scheduled=false',
          'permission' => 'access CiviMail,create mailings,schedule mailings',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+2,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+3 => array(
        'attributes' => Array(
          'label' => 'Scheduled and Sent Emails',
          'name' => 'Scheduled and Sent Emails',
          'url' => 'civicrm/mailing/browse/scheduled?reset=1&scheduled=true',
          'permission' => 'access CiviMail,approve mailings,create mailings,schedule mailings',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+3,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+4 => array(
        'attributes' => Array(
          'label' => 'Find Mailings',
          'name' => 'Find Mailings',
          'url' => 'civicrm/mailing/browse?reset=1',
          'permission' => 'access CiviMail,approve mailings,create mailings,schedule mailings',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+4,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+5 => array(
        'attributes' => Array(
          'label' => 'Archived Emails',
          'name' => 'Archived Emails',
          'url' => 'civicrm/mailing/browse/archived?reset=1',
          'permission' => 'create mailings,schedule mailings,access CiviMail',
          'operator' => 'OR',
          'separator' => 1,
          'parentID' => $emailID,
          'navID' => $emailID+5,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+6 => array(
        'attributes' => Array(
          'label' => 'Mass Email Summary Report',
          'name' => 'Mass Email Summary Report',
          'url' => "civicrm/report/instance/{$rptIDs['summary']}?reset=1",
          'permission' => 'access CiviReport',
          'operator' => 'AND',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+6,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+7 => array(
        'attributes' => Array(
          'label' => 'Mass Email Bounce Report',
          'name' => 'Mass Email Bounce Report',
          'url' => "civicrm/report/instance/{$rptIDs['bounce']}?reset=1",
          'permission' => 'access CiviReport',
          'operator' => 'AND',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+7,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+8 => array(
        'attributes' => Array(
          'label' => 'Mass Email Opened Report',
          'name' => 'Mass Email Opened Report',
          'url' => "civicrm/report/instance/{$rptIDs['opened']}?reset=1",
          'permission' => 'access CiviReport',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+8,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+9 => array(
        'attributes' => Array(
          'label' => 'Mass Email Clickthrough Report',
          'name' => 'Mass Email Clickthrough Report',
          'url' => "civicrm/report/instance/{$rptIDs['clicks']}?reset=1",
          'permission' => 'access CiviReport',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+9,
          'active' => 1,
        ),
        'child' => array(),
      ),
      $emailID+10 => array(
        'attributes' => Array(
          'label' => 'Mass Email Detail Report',
          'name' => 'Mass Email Detail Report',
          'url' => "civicrm/report/instance/{$rptIDs['detail']}?reset=1",
          'permission' => 'access CiviReport',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $emailID,
          'navID' => $emailID+10,
          'active' => 1,
        ),
        'child' => array(),
      ),
    ),
  );

  return $email;
}//_buildManageMenu

/*
 * given our "starting" ID, construct the inbox menu items
 * return the complete array to be added to the main navigation array
 */
function _buildInboxMenu($inboxNavID) {
  $inbox = array(
    'attributes' => array(
      'label'      => 'Inbox',
      'name'       => 'Inbox',
      'url'        => null,
      'permission' => 'access inbox polling',
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => null,
      'navID'      => $inboxNavID,
      'active'     => 1
    ),
    'child' => array(
      $inboxNavID+1 => array(
        'attributes' => array(
          'label'      => 'Unmatched Messages',
          'name'       => 'Unmatched Messages',
          'url'        => 'civicrm/nyss/inbox/unmatched?reset=1',
          'permission' => 'access inbox polling',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $inboxNavID,
          'navID'      => $inboxNavID+1,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $inboxNavID+2 => array(
        'attributes' => array(
          'label'      => 'Matched Messages',
          'name'       => 'Matched Messages',
          'url'        => 'civicrm/nyss/inbox/matched?reset=1',
          'permission' => 'access inbox polling',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $inboxNavID,
          'navID'      => $inboxNavID+2,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $inboxNavID+3 => array(
        'attributes' => array(
          'label'      => 'Reports',
          'name'       => 'Reports',
          'url'        => 'civicrm/nyss/inbox/report',
          'permission' => 'access inbox polling',
          'operator'   => 'AND',
          'separator'  => 2,
          'parentID'   => $inboxNavID,
          'navID'      => $inboxNavID+3,
          'active'     => 1
        ),
        'child' => array(),
      ),
    ),
  );

  return $inbox;
}//_buildInboxMenu

function _buildSearchMenu($searchNavID) {
  $search = array(
    'attributes' => array(
      'label'      => 'Custom Search',
      'name'       => 'Custom Search',
      'url'        => null,
      'permission' => 'access CiviCRM',
      'operator'   => 'AND',
      'separator'  => 0,
      'parentID'   => null,
      'navID'      => $searchNavID,
      'active'     => 1
    ),
    'child' => array(
      $searchNavID+1 => array(
        'attributes' => array(
          'label'      => 'Find Cases',
          'name'       => 'Find Cases',
          'url'        => 'civicrm/case/search?reset=1',
          'permission' => 'access my cases and activities,access all cases and activities',
          'operator'   => 'OR',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+1,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+2 => array(
        'attributes' => array(
          'label'      => 'Find Activities',
          'name'       => 'Find Activities',
          'url'        => 'civicrm/activity/search?reset=1',
          'permission' => 'view all activities',
          'operator'   => 'AND',
          'separator'  => 1,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+2,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+3 => array(
        'attributes' => array(
          'label'      => 'Full-text Search',
          'name'       => 'Full-text Search',
          'url'        => 'civicrm/contact/search/custom?csid=15&reset=1',
          'permission' => 'access CiviCRM',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+3,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+4 => array(
        'attributes' => array(
          'label'      => 'Search Builder',
          'name'       => 'Search Builder',
          'url'        => 'civicrm/contact/search/builder?reset=1',
          'permission' => 'access CiviCRM',
          'operator'   => 'AND',
          'separator'  => 1,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+4,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+5 => array(
        'attributes' => array(
          'label'      => 'Proximity Search',
          'name'       => 'Proximity Search',
          'url'        => 'civicrm/contact/search/custom?reset=1&csid=6',
          'permission' => 'access CiviCRM',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+5,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+6 => array(
        'attributes' => array(
          'label'      => 'Birthday Search',
          'name'       => 'Birthday Search',
          'url'        => 'civicrm/contact/search/custom?reset=1&csid=16',
          'permission' => 'access CiviCRM',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+6,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+7 => array(
        'attributes' => array(
          'label'      => 'Include/Exclude Search',
          'name'       => 'Include/Exclude Search',
          'url'        => 'civicrm/contact/search/custom?csid=4&reset=1',
          'permission' => 'access CiviCRM,view all contacts',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+7,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+8 => array(
        'attributes' => array(
          'label'      => 'Tag/Group Changelog Search',
          'name'       => 'Tag/Group Changelog Search',
          'url'        => 'civicrm/contact/search/custom?csid=17&reset=1',
          'permission' => 'access CiviCRM,view all contacts',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+8,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+9 => array(
        'attributes' => array(
          'label'      => 'Tag Count Search',
          'name'       => 'Tag Count Search',
          'url'        => 'civicrm/contact/search/custom?csid=19&reset=1',
          'permission' => 'access CiviCRM,view all contacts',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+9,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+10 => array(
        'attributes' => array(
          'label'      => 'Web Activity Search',
          'name'       => 'Web Activity Search',
          'url'        => 'civicrm/contact/search/custom?csid=18&reset=1',
          'permission' => 'access CiviCRM,view all contacts',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+10,
          'active'     => 1
        ),
        'child' => array(),
      ),
      $searchNavID+11 => array(
        'attributes' => array(
          'label'      => 'Tag Demographic Search',
          'name'       => 'Tag Demographic Search',
          'url'        => 'civicrm/contact/search/custom?csid=20&reset=1',
          'permission' => 'access CiviCRM,view all contacts',
          'operator'   => 'AND',
          'separator'  => 0,
          'parentID'   => $searchNavID,
          'navID'      => $searchNavID+11,
          'active'     => 1
        ),
        'child' => array(),
      ),
    ),
  );

  return $search;
} //_buildSearchMenu()


//rebuild admin menu
function _buildAdminMenu($nyssBaseID) {
  $mailingCatID = CRM_Core_DAO::singleValueQuery("
    SELECT id FROM civicrm_option_group WHERE name = 'mailing_categories'
  ");

  $adminNav = array(
    'attributes' => array(
      'label' => 'Administer',
      'name' => 'Administer',
      'url' => null,
      'permission' => 'view debug output',
      'operator' => 'AND',
      'separator' => 0,
      'parentID' => null,
      'navID' => $nyssBaseID,
      'active' => 1
    ),
    'child' => array(
      $nyssBaseID+1 => array(
        'attributes' => array(
          'label' => 'Administration Console',
          'name' => 'Administration Console',
          'url' => 'civicrm/admin?reset=1',
          'permission' => 'view debug output',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $nyssBaseID,
          'navID' => $nyssBaseID+1,
          'active' => 1
        ),
        'child' => array(),
      ),
      $nyssBaseID+2 => array(
        'attributes' => array(
          'label' => 'NYSS Manage Mailing Categories',
          'name' => 'NYSS Manage Mailing Categories',
          'url' => "civicrm/admin/optionValue?gid={$mailingCatID}&reset=1",
          'permission' => 'view debug output',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $nyssBaseID,
          'navID' => $nyssBaseID+2,
          'active' => 1
        ),
        'child' => array(),
      ),
    ),
  );

  //CRM_Core_Error::debug_var('adminNav', $adminNav);
  return $adminNav;
} //_buildAdminMenu()

//11965
function _buildHelpMenu($nyssBaseID) {
  $nav = array(
    'attributes' => array(
      'label' => 'Help',
      'name' => 'Help',
      'url' => null,
      'permission' => 'access CiviCRM',
      'operator' => 'AND',
      'separator' => 0,
      'parentID' => null,
      'navID' => $nyssBaseID,
      'active' => 1,
    ),
    'child' => array(
      $nyssBaseID+1 => array(
        'attributes' => array(
          'label' => 'Introduction',
          'name' => 'Introduction',
          'url' => 'sites/all/docs/bluebird_intro.pdf',
          'permission' => 'access CiviCRM',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $nyssBaseID,
          'navID' => $nyssBaseID+1,
          'active' => 1,
          'target' => '_blank',
        ),
        'child' => array(),
      ),
      $nyssBaseID+2 => array(
        'attributes' => array(
          'label' => 'Inbound Email',
          'name' => 'Inbound Email',
          'url' => 'sites/all/docs/bluebird_inbound_email.pdf',
          'permission' => 'access CiviCRM',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $nyssBaseID,
          'navID' => $nyssBaseID+2,
          'active' => 1,
          'target' => '_blank',
        ),
        'child' => array(),
      ),
      $nyssBaseID+3 => array(
        'attributes' => array(
          'label' => 'Mass Email',
          'name' => 'Mass Email',
          'url' => 'sites/all/docs/bluebird_mass_email.pdf',
          'permission' => 'access CiviCRM',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $nyssBaseID,
          'navID' => $nyssBaseID+3,
          'active' => 1,
          'target' => '_blank',
        ),
        'child' => array(),
      ),
      $nyssBaseID+4 => array(
        'attributes' => array(
          'label' => 'Postal Mailings',
          'name' => 'Postal Mailings',
          'url' => 'sites/all/docs/bluebird_postal_mail.pdf',
          'permission' => 'access CiviCRM',
          'operator' => 'OR',
          'separator' => 0,
          'parentID' => $nyssBaseID,
          'navID' => $nyssBaseID+4,
          'active' => 1,
          'target' => '_blank',
        ),
        'child' => array(),
      ),
    ),
  );

  //CRM_Core_Error::debug_var('adminNav', $adminNav);
  return $nav;
} //_buildHelpMenu()


//4808/2960 word replacement for titles
function _fixTitles()
{
  $currentTitle = drupal_get_title();
  //CRM_Core_Error::debug_var('currentTitle', $currentTitle);

  $stringReplacement = array(
    'CiviCRM' => 'Bluebird',
    'CiviMail' => 'BluebirdMail',
    'CiviCase' => 'Case',
    'CiviReport' => 'BluebirdReport',
  );

  foreach ($stringReplacement as $search => $replace) {
    if (strpos($currentTitle, $search) !== false) {
      CRM_Utils_System::setTitle(str_replace($search, $replace, $currentTitle));
    }
  }
} // _fixTitles()

/**
 * @param $formName
 * @param $form
 *
 * #3674 - prevent users from submitting forms multiple times
 * see also themes/Bluebird/scripts/civi-header.js
 */
function _nyss_preventDoubleSubmit($formName, &$form) {
  if (isset($form->_elementIndex['buttons']) &&
    strpos($formName, 'Inline') === false
  ) {
    $buttons =& $form->getElement('buttons');

    //list of exclusions by name or value
    $btnExcludeName = array(
      '_qf_Select_next',
      '_qf_Map_next',
      '_qf_PDF_submit',
      '_qf_PDF_cancel',
      '_qf_Contact_upload_view', //handle separately
      '_qf_Contact_upload_new', //handle separately
      '_qf_Contact_upload_cancel', //handle separately
      '_qf_Email_upload', //7393
      '_qf_Relationship_upload', //4414
      '_qf_Search_refresh',
      '_qf_ProofingReport_next',
      '_qf_ProofingReport_submit',
      '_qf_Label_cancel',
      '_qf_Label_submit',
      '_qf_ExportPermissions_next',
      '_qf_ExportPermissions_submit',
      '_qf_ExportPermissions_cancel',
      '_qf_Website_upload', //7800
      '_qf_Demographics_upload', //7800
      '_qf_CustomData_upload', //7800
      '_qf_ProofingReport_next', //11526
      '_qf_ProofingReport_submit', //11526
    );
    $btnExcludeValue = array(
      'PDF',
      'Print Contact List',
      'File on case'
    );
    $btnHandleValid = array(
      '_qf_Contact_upload_view',
      '_qf_Contact_upload_new',
      '_qf_Contact_upload_cancel',
    );

    foreach ($buttons->_elements as $key=>$button) {
      $btnType = $buttons->_elements[$key]->_attributes['type'];
      if ($btnType == 'submit') {
        $btnName = $buttons->_elements[$key]->_attributes['name'];
        $btnValue = $buttons->_elements[$key]->_attributes['value'];
        if (!in_array($btnName, $btnExcludeName) &&
          !in_array($btnValue, $btnExcludeValue)) {
          $js = "if(this.value!='Processing...'){this._nyss_oldvalue=this.value;this.value='Processing...';cj('#' + this.id).click();this.value=this._nyss_oldvalue;return true;}else{return false;}";
          $buttons->_elements[$key]->_attributes['onclick'] = $js;
        }
        elseif (in_array($btnName, $btnHandleValid)) {
          $jsValid = $jsCancel = '';
          if (strpos($btnName, '_cancel') === false) {
            $jsValid = '&& cj("#Contact").valid()';
          }
          $js = 'if(this.value!="Processing..." '.$jsValid.' ){this._nyss_oldvalue=this.value;this.value="Processing...";cj("#" + this.id).click();this.value=this._nyss_oldvalue;return true;}else{return false;}';
          $buttons->_elements[$key]->_attributes['onclick'] = $js;
        }
      }
    }
    //CRM_Core_Error::debug($buttons);
  }
}
